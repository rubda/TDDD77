==15366== Memcheck, a memory error detector
==15366== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==15366== Using Valgrind-3.11.0.SVN and LibVEX; rerun with -h for copyright info
==15366== Command: test_solver5 --track-origins=yes
==15366== 
--15366-- ./test_solver5:
--15366-- dSYM directory is missing; consider using --dsymutil=yes
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x100007201: conjugate_gradient (in ./test_solver5)
==15366==    by 0x10000745B: range_space_sparse (in ./test_solver5)
==15366==    by 0x1000081D5: solve_subproblem (in ./test_solver5)
==15366==    by 0x10000664D: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D65F: matlib_fabs (in ./test_solver5)
==15366==    by 0x1000092BF: compare_matrices (in ./test_solver5)
==15366==    by 0x100007497: range_space_sparse (in ./test_solver5)
==15366==    by 0x1000081D5: solve_subproblem (in ./test_solver5)
==15366==    by 0x10000664D: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D670: matlib_fabs (in ./test_solver5)
==15366==    by 0x1000092BF: compare_matrices (in ./test_solver5)
==15366==    by 0x100007497: range_space_sparse (in ./test_solver5)
==15366==    by 0x1000081D5: solve_subproblem (in ./test_solver5)
==15366==    by 0x10000664D: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D688: matlib_fabs (in ./test_solver5)
==15366==    by 0x1000092BF: compare_matrices (in ./test_solver5)
==15366==    by 0x100007497: range_space_sparse (in ./test_solver5)
==15366==    by 0x1000081D5: solve_subproblem (in ./test_solver5)
==15366==    by 0x10000664D: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x1000092E5: compare_matrices (in ./test_solver5)
==15366==    by 0x100007497: range_space_sparse (in ./test_solver5)
==15366==    by 0x1000081D5: solve_subproblem (in ./test_solver5)
==15366==    by 0x10000664D: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D65F: matlib_fabs (in ./test_solver5)
==15366==    by 0x10000CF57: is_zero_matrix (in ./test_solver5)
==15366==    by 0x100006660: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D670: matlib_fabs (in ./test_solver5)
==15366==    by 0x10000CF57: is_zero_matrix (in ./test_solver5)
==15366==    by 0x100006660: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D688: matlib_fabs (in ./test_solver5)
==15366==    by 0x10000CF57: is_zero_matrix (in ./test_solver5)
==15366==    by 0x100006660: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000CF6A: is_zero_matrix (in ./test_solver5)
==15366==    by 0x100006660: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x100006283: take_step (in ./test_solver5)
==15366==    by 0x10000669F: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x1000063C0: take_step (in ./test_solver5)
==15366==    by 0x10000669F: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D65F: matlib_fabs (in ./test_solver5)
==15366==    by 0x10000D570: compare_elements (in ./test_solver5)
==15366==    by 0x100005CE7: fill_active_set (in ./test_solver5)
==15366==    by 0x1000066B7: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D670: matlib_fabs (in ./test_solver5)
==15366==    by 0x10000D570: compare_elements (in ./test_solver5)
==15366==    by 0x100005CE7: fill_active_set (in ./test_solver5)
==15366==    by 0x1000066B7: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D688: matlib_fabs (in ./test_solver5)
==15366==    by 0x10000D570: compare_elements (in ./test_solver5)
==15366==    by 0x100005CE7: fill_active_set (in ./test_solver5)
==15366==    by 0x1000066B7: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D58E: compare_elements (in ./test_solver5)
==15366==    by 0x100005CE7: fill_active_set (in ./test_solver5)
==15366==    by 0x1000066B7: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D5B8: compare_elements (in ./test_solver5)
==15366==    by 0x100005CE7: fill_active_set (in ./test_solver5)
==15366==    by 0x1000066B7: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D5CB: compare_elements (in ./test_solver5)
==15366==    by 0x100005CE7: fill_active_set (in ./test_solver5)
==15366==    by 0x1000066B7: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x100007201: conjugate_gradient (in ./test_solver5)
==15366==    by 0x1000073F1: range_space_sparse (in ./test_solver5)
==15366==    by 0x1000081D5: solve_subproblem (in ./test_solver5)
==15366==    by 0x10000664D: quadopt_solver (in ./test_solver5)
==15366==    by 0x100003938: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D65F: matlib_fabs (in ./test_solver5)
==15366==    by 0x1000092BF: compare_matrices (in ./test_solver5)
==15366==    by 0x100003952: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D670: matlib_fabs (in ./test_solver5)
==15366==    by 0x1000092BF: compare_matrices (in ./test_solver5)
==15366==    by 0x100003952: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x10000D688: matlib_fabs (in ./test_solver5)
==15366==    by 0x1000092BF: compare_matrices (in ./test_solver5)
==15366==    by 0x100003952: main (in ./test_solver5)
==15366== 
==15366== Conditional jump or move depends on uninitialised value(s)
==15366==    at 0x1000092E5: compare_matrices (in ./test_solver5)
==15366==    by 0x100003952: main (in ./test_solver5)
==15366== 
time taken was: 8.886635 
==15366== 
==15366== HEAP SUMMARY:
==15366==     in use at exit: 39,201 bytes in 433 blocks
==15366==   total heap usage: 198,720 allocs, 198,287 frees, 350,342,849 bytes allocated
==15366== 
==15366== LEAK SUMMARY:
==15366==    definitely lost: 0 bytes in 0 blocks
==15366==    indirectly lost: 0 bytes in 0 blocks
==15366==      possibly lost: 0 bytes in 0 blocks
==15366==    still reachable: 4,244 bytes in 4 blocks
==15366==         suppressed: 34,957 bytes in 429 blocks
==15366== Rerun with --leak-check=full to see details of leaked memory
==15366== 
==15366== For counts of detected and suppressed errors, rerun with: -v
==15366== Use --track-origins=yes to see where uninitialised values come from
==15366== ERROR SUMMARY: 7801 errors from 22 contexts (suppressed: 0 from 0)
